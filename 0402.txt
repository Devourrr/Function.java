변수
- 기본자료형 변수 (int a, int sum)	: 데이타
-(int[] arr(참조형 변수) = new int[5]   : 데이타가 있는 위치 
(동적메모리 요청방식 new 연산자 이용해서 메모리 요청함)

메모리 : 사용, 반납

stack정적 : 사용할 변수를 미리정함 (int sum)
장점
해제하지 않음으로 인한 메모리 누수와 같은 문제를 신경쓰지 않아도 된다. 
정적 할당된 메모리는 실행 도중에 해제되지 않고, 
프로그램이 종료할 때 알아서 운영 체제가 회수한다.
단점
메모리의 크기가 하드 코딩되어 있어서 나중에 조절 할 수 없다. 
스택에 할당된 메모리이므로 동적 할당에 비해 할당 받을 수 있는 최대 메모리에 제약을 받는다.




heap동적 : 실행 중에 메모리를 요청하는 방법 ( new, delete : x )
	new int[3] => 메모리요청 ( int*3, 즉 12byte)
		   => 할당된 메모리의 위치 즉 주소를 반환
		   => 할당된 메모리의 주소를 기억할 참조형변수가 필요
	int[] arr = new int[3];
장점
상황에 따라 원하는 크기만큼의 메모리가 할당되므로 경제적이며, 
이미 할당된 메모리라도 언제든지 크기를 조절할 수 있다.
단점
더 이상 사용하지 않을 때 명시적으로 메모리를 해제해 주어야 한다. 
자바는 GC가 할당하므로서, 이 단점을 보완하였다.



메모리를 쓰는 두가지 방법
정적
- 컴파일 시점에 결정 compile 타임
- 사용할 메모리를 결정하고 씀

동적
- 컴파일 시점에 결정
runtume 타임

- 실행시에 사용할 메모리를 결정
메모리요청, 반납요청 하는 방식

- new 연산자를 이용해서 요청 반납은 GC가 대신

정적으로 사용하는 방식은 메모리의 낭비가 발생할 수 있다

import java.util.Scanner;

public class Memori {

	public static void main(String[] args) {
		 

		//정적으로 메모리 쓰는 방법 (컴파일시점에 메모리를 쓰는 양이 정해짐)
		int a1,b1,c1,d1,f1;		
		int a2,b2,c2,d2,f2;
		int a3,b3,c3,d3,f3;
		int a4,b4,c4,d4,f4;
		int a5,b5,c5,d5,f5;		
		int a6,b6,c6,d6,f6;
		int a7,b7,c7,d7,f7;		
		
		// int arr[100] ;   // 이런 표현이 아예안된다. 자바는 		
				
//동적으로 메모리를 쓰는 방법: 실행시에 배열의 크기가 결정
		// new연산자를 통해서 메모리 요청한다.
		

		System.out.println("배열의 크기를 입력하세요 : ");
		Scanner sc = new Scanner(System.in);
		int cnt = sc.nextInt();
		int  arr[];
		arr = new int[cnt];		
		System.out.println( arr.length);
			
				
		for(int i=0; i< arr.length ; i++)
		{
			System.out.print( i+1 +"번째 입력:  ");
			arr[i]= sc.nextInt();
		}	
		
		for(int i=0; i< arr.length ; i++)
			System.out.println( arr[i]);		
	
	}
}
